import org.apache.spark.mllib.feature.PCA
import org.apache.spark.mllib.linalg.Vectors
import org.apache.spark.mllib.regression.LabeledPoint
import org.apache.spark.rdd.RDD


import org.apache.spark.ml.linalg.SparseVector


import org.apache.spark.ml.Pipeline
import org.apache.spark.ml.classification.DecisionTreeClassificationModel
import org.apache.spark.ml.classification.DecisionTreeClassifier
import org.apache.spark.ml.evaluation.MulticlassClassificationEvaluator
import org.apache.spark.ml.feature.{IndexToString, StringIndexer, VectorIndexer}

import org.apache.spark.ml.Pipeline
import org.apache.spark.ml.classification.DecisionTreeClassificationModel
import org.apache.spark.ml.classification.DecisionTreeClassifier
import org.apache.spark.ml.evaluation.MulticlassClassificationEvaluator
import org.apache.spark.ml.feature.{IndexToString, StringIndexer, VectorIndexer}
import org.apache.spark.sql.Row
import org.apache.spark.ml.classification.NaiveBayes
import org.apache.spark.mllib.evaluation.MulticlassMetrics
import org.apache.spark.mllib.regression.LabeledPoint


val tf1=sc.textFile("../data/bigdata/rst.data")

val temp1=tf1.map(l=>l.split(" ")).collect


var temp2=temp1.map(l=>new LabeledPoint(l(0).toFloat,Vectors.dense(l(1).substring(2).toFloat,l(2).substring(2).toFloat,l(3).substring(2).toFloat,l(4).substring(2).toFloat,l(5).substring(2).toFloat)))

val data: RDD[LabeledPoint] = sc.parallelize(temp2);

val pca = new PCA(4).fit(data.map(_.features))


val projected = data.map(p => p.copy(features = pca.transform(p.features)))


val da=projected.map(l=>(l.label.toFloat,new SparseVector(4,Array(0,1,2,3),Array(l.features(0).toDouble,l.features(1).toDouble,l.features(2).toDouble,l.features(3).toDouble)))).collect.toSeq.toDF("label","features")

val labelIndexer = new StringIndexer().setInputCol("label").setOutputCol("indexedLabel").fit(da)

val featureIndexer = new VectorIndexer().setInputCol("features").setOutputCol("indexedFeatures").setMaxCategories(4).fit(da)

val Array(trainingData, testData) = da.randomSplit(Array(0.7, 0.3))

val dt = new DecisionTreeClassifier().setLabelCol("indexedLabel").setFeaturesCol("indexedFeatures")

// Convert indexed labels back to original labels.
val labelConverter = new IndexToString().setInputCol("prediction").setOutputCol("predictedLabel").setLabels(labelIndexer.labels)

// Chain indexers and tree in a Pipeline.
val pipeline = new Pipeline().setStages(Array(labelIndexer, featureIndexer, dt, labelConverter))

// Train model. This also runs the indexers.
val model = pipeline.fit(trainingData)

// Make predictions.
val predictions = model.transform(testData)

// Select example rows to display.
predictions.select("predictedLabel", "label", "features").show(5)

// Select (prediction, true label) and compute test error.
//supports "f1" (default), "weightedPrecision", "weightedRecall", "accuracy")
val evaluator = new MulticlassClassificationEvaluator().setLabelCol("indexedLabel").setPredictionCol("prediction").setMetricName("accuracy")

val accuracy = evaluator.evaluate(predictions)
println("Test Error = " + (1.0 - accuracy))

val evaluator1 = new MulticlassClassificationEvaluator().setLabelCol("indexedLabel").setPredictionCol("prediction").setMetricName("f1")

val f1 = evaluator1.evaluate(predictions)

println("f1 = " + f1)

val evaluator2 = new MulticlassClassificationEvaluator().setLabelCol("indexedLabel").setPredictionCol("prediction").setMetricName("weightedPrecision")

val weightedPrecision = evaluator2.evaluate(predictions)

println("weightedPrecision = " + weightedPrecision)


